"use strict";
exports.__esModule = true;
exports.GENERATED_FILE_HEADER = void 0;
var path = require("path");
var ts = require("typescript");
var fs = require("fs");
exports.GENERATED_FILE_HEADER = "// <auto-generated>\n// This code was auto-generated.\n// Changes to this file may cause incorrect behavior and will be lost if\n// the code is regenerated.\n// </auto-generated>";
function createEmitter(jsDocMarker, generate) {
    function generateClass(program, classDeclaration) {
        var sourceFileName = path.relative(path.resolve(program.getCompilerOptions().baseUrl, 'src'), path.resolve(classDeclaration.getSourceFile().fileName));
        var result = generate(program, classDeclaration);
        var defaultClass = result.statements.find(function (stmt) { return ts.isClassDeclaration(stmt) && stmt.modifiers.find(function (m) { return m.kind === ts.SyntaxKind.ExportKeyword; }); });
        var targetFileName = path.join(path.resolve(program.getCompilerOptions().baseUrl), 'src/generated', path.dirname(sourceFileName), "".concat(defaultClass.name.text, ".ts"));
        fs.mkdirSync(path.dirname(targetFileName), { recursive: true });
        var fileHandle = fs.openSync(targetFileName, 'w');
        fs.writeSync(fileHandle, "".concat(exports.GENERATED_FILE_HEADER, "\n"));
        var printer = ts.createPrinter();
        var source = printer.printNode(ts.EmitHint.Unspecified, result, result);
        var servicesHost = {
            getScriptFileNames: function () { return [targetFileName]; },
            getScriptVersion: function () { return result.languageVersion.toString(); },
            getScriptSnapshot: function (fileName) {
                return fileName === targetFileName ? ts.ScriptSnapshot.fromString(source) : undefined;
            },
            getCurrentDirectory: function () { return process.cwd(); },
            getCompilationSettings: function () { return program.getCompilerOptions(); },
            getDefaultLibFileName: function (options) { return ts.getDefaultLibFilePath(options); },
            fileExists: function (fileName) { return fileName === targetFileName; },
            readFile: function (fileName) { return (fileName === targetFileName ? source : ''); },
            readDirectory: ts.sys.readDirectory,
            directoryExists: ts.sys.directoryExists,
            getDirectories: ts.sys.getDirectories
        };
        var languageService = ts.createLanguageService(servicesHost, ts.createDocumentRegistry());
        var formattingChanges = languageService.getFormattingEditsForDocument(targetFileName, {
            convertTabsToSpaces: true,
            insertSpaceAfterCommaDelimiter: true,
            insertSpaceAfterKeywordsInControlFlowStatements: true,
            insertSpaceBeforeAndAfterBinaryOperators: true,
            indentStyle: ts.IndentStyle.Smart,
            indentSize: 4,
            tabSize: 4,
            trimTrailingWhitespace: true
        });
        formattingChanges.sort(function (a, b) { return b.span.start - a.span.start; });
        var finalText = source;
        for (var _i = 0, formattingChanges_1 = formattingChanges; _i < formattingChanges_1.length; _i++) {
            var _a = formattingChanges_1[_i], _b = _a.span, start = _b.start, length_1 = _b.length, newText = _a.newText;
            finalText = "".concat(finalText.slice(0, start)).concat(newText).concat(finalText.slice(start + length_1));
        }
        fs.writeSync(fileHandle, finalText);
        fs.closeSync(fileHandle);
    }
    function scanSourceFile(program, sourceFile) {
        sourceFile.statements.forEach(function (stmt) {
            if (ts.isClassDeclaration(stmt) && ts.getJSDocTags(stmt).some(function (t) { return t.tagName.text === jsDocMarker; })) {
                generateClass(program, stmt);
            }
        });
    }
    return function emit(program, _diagnostics) {
        program.getRootFileNames().forEach(function (file) {
            scanSourceFile(program, program.getSourceFile(file));
        });
    };
}
exports["default"] = createEmitter;
